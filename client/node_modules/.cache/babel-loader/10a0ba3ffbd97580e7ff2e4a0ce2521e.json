{"ast":null,"code":"var _jsxFileName = \"/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [pins, setPins] = useState([]);\n\n  const getData = async () => {\n    try {\n      const {\n        data\n      } = await axios.get('/api/allpins');\n      setPins([...pins, ...data]);\n      console.log(data);\n    } catch (error) {\n      console.log('ERROR!', error);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: pins.length,\n      next: getData,\n      hasMore: true,\n      loader: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this),\n      children: pins.map(pin => /*#__PURE__*/_jsxDEV(Pin, {\n        url: pin.images.orig.url,\n        alt: \"\"\n      }, pin.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // images.236x.url\n\n\n_s(App, \"lXbYceN8aKfWLs4tYW+R7vq54Lc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js"],"names":["useState","useEffect","axios","InfiniteScroll","Loader","Header","Pin","App","pins","setPins","getData","data","get","console","log","error","length","map","pin","images","orig","url","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMU,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMT,KAAK,CAACU,GAAN,CAAU,cAAV,CAAvB;AACAH,MAAAA,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGG,IAAb,CAAD,CAAP;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,KAJD,CAIE,OAAOI,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,KAAtB;AACD;AACF,GARD;;AAUAd,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,cAAD;AACE,MAAA,UAAU,EAAEF,IAAI,CAACQ,MADnB;AAEE,MAAA,IAAI,EAAEN,OAFR;AAGE,MAAA,OAAO,EAAE,IAHX;AAIE,MAAA,MAAM,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAJV;AAAA,gBAMGF,IAAI,CAACS,GAAL,CAAUC,GAAD,iBACR,QAAC,GAAD;AAAK,QAAA,GAAG,EAAEA,GAAG,CAACC,MAAJ,CAAWC,IAAX,CAAgBC,GAA1B;AAA4C,QAAA,GAAG,EAAC;AAAhD,SAAoCH,GAAG,CAACI,EAAxC;AAAA;AAAA;AAAA;AAAA,cADD;AANH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAiBD,C,CAED;;;GApCSf,G;;KAAAA,G;AAsCT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\n\nfunction App() {\n  const [pins, setPins] = useState([]);\n\n  const getData = async () => {\n    try {\n      const { data } = await axios.get('/api/allpins');\n      setPins([...pins, ...data]);\n      console.log(data);\n    } catch (error) {\n      console.log('ERROR!', error);\n    }\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  return (\n    <>\n      <Header />\n      {/* <button onClick={getData}>press me</button> */}\n      <InfiniteScroll\n        dataLength={pins.length}\n        next={getData}\n        hasMore={true}\n        loader={<Loader />}\n      >\n        {pins.map((pin) => (\n          <Pin url={pin.images.orig.url} key={pin.id} alt=\"\" />\n        ))}\n      </InfiniteScroll>\n      {/* <img src=\"https://s-media-cache-ak0.pinimg.com/136x136/c1/e3/b7/c1e3b7b629b4d446b392ed623d0c0017.jpg\"></img> */}\n    </>\n  );\n}\n\n// images.236x.url\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}