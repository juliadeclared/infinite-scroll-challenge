{"ast":null,"code":"var _jsxFileName = \"/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { GridList } from '@material-ui/core';\nimport Cursor from './components/Cursor';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\nimport OpenPin from './components/OpenPin';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [pins, setPins] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedPin, setSelectedPin] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(`/api/pins/${searchTerm}`);\n\n      if (searchTerm.length) {\n        setPins(data);\n      } else setPins([...pins, ...data]);\n\n      console.log(data);\n    } catch (error) {\n      console.log('Error getting pins!', error);\n    }\n  };\n\n  const customClick = p => {\n    setShowModal(true);\n    setSelectedPin(p);\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n  console.log(selectedPin);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      setSearchTerm: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), selectedPin && /*#__PURE__*/_jsxDEV(OpenPin, {\n      pin: selectedPin,\n      show: showModal,\n      setShow: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: pins.length,\n      next: getData,\n      hasMore: true,\n      loader: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        cols: 5,\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'center'\n        },\n        children: pins.map(pin => /*#__PURE__*/_jsxDEV(Pin, {\n          url: pin.images.orig.url,\n          pinInfo: pin,\n          customClick: () => customClick(pin)\n        }, pin.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"GhjTTZyvHht5wJzCpSKN7xvJbJ0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js"],"names":["useState","useEffect","axios","InfiniteScroll","GridList","Cursor","Loader","Header","Pin","OpenPin","App","pins","setPins","searchTerm","setSearchTerm","selectedPin","setSelectedPin","showModal","setShowModal","getData","data","get","length","console","log","error","customClick","p","display","flexWrap","justifyContent","map","pin","images","orig","url","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,OAAOC,OAAP,MAAoB,sBAApB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMmB,OAAO,GAAG,YAAY;AAC1B,QAAI;AACF,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMlB,KAAK,CAACmB,GAAN,CAAW,aAAYR,UAAW,EAAlC,CAAvB;;AAEA,UAAGA,UAAU,CAACS,MAAd,EAAqB;AACnBV,QAAAA,OAAO,CAACQ,IAAD,CAAP;AACD,OAFD,MAGAR,OAAO,CAAC,CAAC,GAAGD,IAAJ,EAAU,GAAGS,IAAb,CAAD,CAAP;;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACD,KARD,CAQE,OAAOK,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCC,KAAnC;AACD;AACF,GAZD;;AAcA,QAAMC,WAAW,GAAIC,CAAD,IAAO;AACzBT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,cAAc,CAACW,CAAD,CAAd;AACD,GAHD;;AAKA1B,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,aAAa,EAAED;AAAvB;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGC,WAAW,iBAAI,QAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,WAAd;AAA2B,MAAA,IAAI,EAAEE,SAAjC;AAA4C,MAAA,OAAO,EAAEC;AAArD;AAAA;AAAA;AAAA;AAAA,YAHlB,eAIE,QAAC,cAAD;AACE,MAAA,UAAU,EAAEP,IAAI,CAACW,MADnB;AAEE,MAAA,IAAI,EAAEH,OAFR;AAGE,MAAA,OAAO,EAAE,IAHX;AAIE,MAAA,MAAM,eAAE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAJV;AAAA,6BAME,QAAC,QAAD;AACE,QAAA,IAAI,EAAE,CADR;AAEE,QAAA,KAAK,EAAE;AACLS,UAAAA,OAAO,EAAE,MADJ;AAELC,UAAAA,QAAQ,EAAE,MAFL;AAGLC,UAAAA,cAAc,EAAE;AAHX,SAFT;AAAA,kBAQGnB,IAAI,CAACoB,GAAL,CAAUC,GAAD,iBACN,QAAC,GAAD;AAAK,UAAA,GAAG,EAAEA,GAAG,CAACC,MAAJ,CAAWC,IAAX,CAAgBC,GAA1B;AAA4C,UAAA,OAAO,EAAEH,GAArD;AAA0D,UAAA,WAAW,EAAE,MAAKN,WAAW,CAACM,GAAD;AAAvF,WAAoCA,GAAG,CAACI,EAAxC;AAAA;AAAA;AAAA;AAAA,gBADH;AARH;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA,kBADF;AA0BD;;GAzDQ1B,G;;KAAAA,G;AA2DT,eAAeA,GAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { GridList } from '@material-ui/core';\n\nimport Cursor from './components/Cursor';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\nimport OpenPin from './components/OpenPin';\n\nfunction App() {\n  const [pins, setPins] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(\"\")\n  const [selectedPin, setSelectedPin] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const { data } = await axios.get(`/api/pins/${searchTerm}`);\n\n      if(searchTerm.length){\n        setPins(data);\n      }else\n      setPins([...pins, ...data]);\n      console.log(data);\n    } catch (error) {\n      console.log('Error getting pins!', error);\n    }\n  };\n\n  const customClick = (p) => {\n    setShowModal(true)\n    setSelectedPin(p)\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  console.log(selectedPin)\n\n  return (\n    <>\n      <Cursor />\n      <Header setSearchTerm={setSearchTerm} />\n      {selectedPin && <OpenPin pin={selectedPin} show={showModal} setShow={setShowModal} />}\n      <InfiniteScroll\n        dataLength={pins.length}\n        next={getData}\n        hasMore={true}\n        loader={<Loader />}\n      >\n        <GridList\n          cols={5}\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n          }}\n        >\n          {pins.map((pin) => (\n              <Pin url={pin.images.orig.url} key={pin.id} pinInfo={pin} customClick={()=> customClick(pin)} />\n          ))}\n        </GridList>\n      </InfiniteScroll>\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}