{"ast":null,"code":"var _jsxFileName = \"/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { GridList, Typography } from '@material-ui/core';\nimport Cursor from './components/Cursor';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\nimport OpenPin from './components/OpenPin';\nimport HomePageFade from './components/HomePageFade';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [pins, setPins] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPin, setSelectedPin] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const {\n        data\n      } = await axios.get(`/api/pins/${searchTerm}`); // if there is a search, only populate page with searched\n\n      if (searchTerm.length) {\n        setPins(data);\n      } else setPins([...pins, ...data]);\n    } catch (error) {\n      console.log('Error getting pins!', error);\n    }\n  };\n\n  const customClick = p => {\n    setShowModal(true);\n    setSelectedPin(p);\n  };\n\n  useEffect(() => {\n    getData();\n  }, [searchTerm]);\n  console.log(selectedPin);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Cursor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HomePageFade, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      setSearchTerm: setSearchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), selectedPin && /*#__PURE__*/_jsxDEV(OpenPin, {\n      pin: selectedPin,\n      show: showModal,\n      setShow: setShowModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), pins.length ? /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      dataLength: pins.length,\n      next: getData,\n      hasMore: true,\n      loader: /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(GridList, {\n        cols: 5,\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          justifyContent: 'center'\n        },\n        children: pins.map(pin => /*#__PURE__*/_jsxDEV(Pin, {\n          url: pin.images.orig.url,\n          pinInfo: pin,\n          customClick: () => customClick(pin)\n        }, pin.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      style: {\n        color: 'white',\n        textAlign: 'center'\n      },\n      children: \"All out of kittens!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"5nE0Qe1s5uPf6A9jB608OWEs730=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Julia/Documents/Projects/infinite-scroll/client/src/App.js"],"names":["useState","useEffect","axios","InfiniteScroll","GridList","Typography","Cursor","Loader","Header","Pin","OpenPin","HomePageFade","App","pins","setPins","searchTerm","setSearchTerm","selectedPin","setSelectedPin","showModal","setShowModal","getData","data","get","length","error","console","log","customClick","p","display","flexWrap","justifyContent","map","pin","images","orig","url","id","color","textAlign"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nimport { GridList, Typography } from '@material-ui/core';\n\nimport Cursor from './components/Cursor';\nimport Loader from './components/Loader';\nimport Header from './components/Header';\nimport Pin from './components/Pin';\nimport OpenPin from './components/OpenPin';\nimport HomePageFade from './components/HomePageFade';\n\nfunction App() {\n  const [pins, setPins] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedPin, setSelectedPin] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n\n  const getData = async () => {\n    try {\n      const { data } = await axios.get(`/api/pins/${searchTerm}`);\n\n      // if there is a search, only populate page with searched\n      if (searchTerm.length) {\n        setPins(data);\n      } else setPins([...pins, ...data]);\n    } catch (error) {\n      console.log('Error getting pins!', error);\n    }\n  };\n\n  const customClick = (p) => {\n    setShowModal(true);\n    setSelectedPin(p);\n  };\n\n  useEffect(() => {\n    getData();\n  }, [searchTerm]);\n\n  console.log(selectedPin);\n\n  return (\n    <>\n      <Cursor />\n      <HomePageFade />\n      <Header setSearchTerm={setSearchTerm} />\n      {selectedPin && (\n        <OpenPin pin={selectedPin} show={showModal} setShow={setShowModal} />\n      )}\n      {pins.length ? (\n        <InfiniteScroll\n          dataLength={pins.length}\n          next={getData}\n          hasMore={true}\n          loader={<Loader />}\n        >\n          <GridList\n            cols={5}\n            style={{\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center',\n            }}\n          >\n            {pins.map((pin) => (\n              <Pin\n                url={pin.images.orig.url}\n                key={pin.id}\n                pinInfo={pin}\n                customClick={() => customClick(pin)}\n              />\n            ))}\n          </GridList>\n        </InfiniteScroll>\n      ) : (\n        <Typography\n          variant=\"h3\"\n          style={{ color: 'white', textAlign: 'center' }}\n        >\n          All out of kittens!\n        </Typography>\n      )}\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}